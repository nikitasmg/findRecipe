# Indicates what fields are available at the top level of a query operation.
type Query {
  me: User!
  newsById(id: ID!): News
  newsBySlug(slug: String!): News
  user(id: ID, email: String): User
  news(
    sort: [OrderByClause!]
    filter: [FilterByClause!]

    # Limits number of fetched items.
    first: Int = 30

    # The offset from which items are returned.
    page: Int
  ): NewsPaginator
  users(
    name: String

    # Limits number of fetched items.
    first: Int = 10

    # The offset from which items are returned.
    page: Int
  ): UserPaginator
}

type User {
  id: ID!
  role: Int!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

# Временной формат стандарта UTC YYYY-MM-DDTHH:mm:ss.SSSSSSZ
scalar DateTime

type News {
  id: ID!
  name: String!
  slug: String!
  content: String
  description: String
  published_at: DateTime
  imageUrl: String
  created_at: DateTime!
  updated_at: DateTime!
}

# Allows ordering a list of records.
input OrderByClause {
  # The column that is used for ordering.
  column: String!

  # The direction that is used for ordering.
  order: SortOrder!
}

# Directions for ordering a list of records.
enum SortOrder {
  # Sort records in ascending order.
  ASC

  # Sort records in descending order.
  DESC
}

input FilterByClause {
  column: String!
  value: String!
}

# A paginated list of News items.
type NewsPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of News items.
  data: [News!]!
}

# Information about pagination using a fully featured paginator.
type PaginatorInfo {
  # Number of items in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the first item in the current page.
  firstItem: Int

  # Are there more pages after this one?
  hasMorePages: Boolean!

  # Index of the last item in the current page.
  lastItem: Int

  # Index of the last available page.
  lastPage: Int!

  # Number of items per page.
  perPage: Int!

  # Number of total available items.
  total: Int!
}

# A paginated list of User items.
type UserPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of User items.
  data: [User!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  logout: User

  # Для тестирования, потом убрать
  upload(file: Upload!): String
  upsertNews(input: NewsInput): News
}

# Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec
scalar Upload

input NewsInput {
  id: ID
  name: String!
  slug: String
  content: String
  description: String
  published_at: DateTime
  image: Upload
  deleteImage: Boolean
}

# Aggregate functions when ordering by a relation without specifying a column.
enum OrderByRelationAggregateFunction {
  # Amount of items.
  COUNT
}

# Aggregate functions when ordering by a relation that may specify a column.
enum OrderByRelationWithColumnAggregateFunction {
  # Average.
  AVG

  # Minimum.
  MIN

  # Maximum.
  MAX

  # Sum.
  SUM

  # Amount of items.
  COUNT
}

# Information about pagination using a simple paginator.
type SimplePaginatorInfo {
  # Number of items in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the first item in the current page.
  firstItem: Int

  # Index of the last item in the current page.
  lastItem: Int

  # Number of items per page.
  perPage: Int!

  # Are there more pages after this one?
  hasMorePages: Boolean!
}

# Information about pagination using a Relay style cursor connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # The cursor to continue paginating backwards.
  startCursor: String

  # The cursor to continue paginating forwards.
  endCursor: String

  # Total number of nodes in the paginated connection.
  total: Int!

  # Number of nodes in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the last available page.
  lastPage: Int!
}

# Specify if you want to include or exclude trashed results from a query.
enum Trashed {
  # Only return trashed results.
  ONLY

  # Return both trashed and non-trashed results.
  WITH

  # Only return non-trashed results.
  WITHOUT
}
